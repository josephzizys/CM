; Use 'begin' and 'end' statements to group a series of statements
; into a single block that gets executed as a single statement. every
; 'begin' must be balanced by a corresponding 'end':

begin
  print "hello"
  print "goodbye"
end

; you can add a 'with' statement at the start of a begin end block to
; declare local variable(s) that exist only within the lexical scope
; of the block:

begin
  with key = random(128)
  print "my random key: ", key
end

; use a comma to delimit variable definitions if there are more than
; one. the values of earlier (leftward) variables can be referenced by
; later (rightward) variables in their definition:

begin
  with a, b = 1, c = list(a,b)
  print "variable a is ", a, " b is ", b, " c is ", c
end

; begin end blocks can be nested to any depth. inner blocks see all
; the variables declared within their containing (outer) blocks. if an
; inner block declares a variable with the same name as an outer
; variable the inner definition will "shadow" the outer for the extent
; of the inner block:

begin
  with a = 1, b = 2
  print "outer block: a is ", a, " b is ", b
  begin
    with a = -99
    print "inner block: a is ", a, " b is ", b
  end
  print "outer block again: a is ", a , " b is ", b
end

