;
;; Variables
; 

; A variable is a symbol that stands for a value. There are actually
; two types of variables: 'global' variables are variables that you
; create using the 'define' command; 'local' variables are variables
; that you declare using a 'with...' statement in code blocks like
; 'begin...end', 'loop...end', or 'run...end'.  More about local
; variables in just a bit...

;
;; Defining global variables
;

; A global variable is a variable that all code can reference. For
; example, if you were working on a twelve-tone composition you might
; want to create a global variable to hold the actual row of the
; composition. That way all the code you develop could "agree" on the
; row they are working with simply by referencing the row stored in
; that global variable.

; Use the 'define variable' command to define a global variable. This
; is what a twelve-tone row definition might look like. Put your
; cursor at the end of the line and press COMMAND-Enter to execute the
; definition:

define variable row = {0 11 1 10 2 9 3 8 4 7 5 6}

print "Prime row: ", row, ", retograde row: ", reverse(row)

; The 'define variable' command takes the name of the new global
; variable, followed by an optional '= <value>' initialization.  If
; you don't provide an initial value for global variable it is
; automatically set to #f (boolean false).  Other facts: the value
; after the = can be any SAL sexpr, and you can define more than one
; variable at a time using a comma between each variable
; definition. In this next example we define two globals, the first
; holds a row type we randomly choose from four possible row types
; (using a string to represent the prime retrograde inversion and
; retrograde-inversion row forms) and the second global to hold a
; transposition offset:

define variable row-form = pick( "p", "r", "i", "ri") ,
       row-transp = between(0, 12)
  
;
;; Local variables
;

; Sometimes a variable is needed only for a particular set of
; statements.  A local variable is a temporary variable that is only
; defined within a specific block of code.  Use the 'with' statement
; to declare local, temporary variables inside 'begin...end', 'loop'
; or 'run' blocks. These variables only exist inside the lexical scope
; of the block.  Here is an example of two local variables x and
; y. Place your cursor after the word 'end' and press COMMAND-Enter
; several times:

begin
  with x = random(12) ,
       y = x + 12
  print list(x,y)
end

; Its clear from the print statement that when the block executes the
; variables x and y have values (or else the print statement wouldn't
; work!). But notice that if you try to evaluate either x or y OUTSIDE
; the block an error occurs because those variables don;t exist
; outside the block in which they were (locally) declared. Executing
; this next statement will trigger an error message because there is
; no global variable called x (unless you created one yourself!)

print x

; Notice that a variable declared inside an inner block will shadow
; the same variable declared in an outer block. In this example, both
; blocks declare a variable 'x' but the print statements clearly show
; that they are different variables!

begin
  with x = 1
  print "outer block, x=", x
  begin
    with x = 2
    print "inner block, x=", x
  end
  print "outer block, x=", x
end

;
;; Variable assignment: the 'set' command
;

; What if want to assign a differnt value to an existing variable?
; For global variables, on solution might be to re-execute the define
; commands with a different inital value. Another way is to ASSIGN the
; variable a new value using the SET command.

define variable row = {11 10 9 8 7 6 5 4 3 2 1 0},
       row-form = "p",
       row-transp = 0

print "row=", row, " row-form=", row-form, " row-transp=", row-transp

set row = {0 1 2 3 4 5 6 7 8 9 10 11},
    row-form = "r",
    row-transp = between(6, 12)

print "row=", row, " row-form=", row-form, " row-transp=", row-transp


; On first appearance the 'set' command looks very much like the
; define variable command, including the ability to operate on more
; than one variable at a time. But there are actually several
; important differences between define and set. First, and most
; importatly, set does not actualy CREATE variables, it simply sets an
; existing one to a new value. Secondly, the 'set' command supports
; many more 'assignment operators' than define does. The set operators
; are:

;   =       assign a variable a value
;   +=      increment a variable by an amount
;   *=      scale a variable by an amount
;   &=      add a value to the end of a variable's list
;   ^=      append a list to the end of a variable's list
;   @=      add a value to the front of a variable's list
;   <=      minimize a variable 
;   >=      maximize a variable 

; Here is an example of each set operator in action. In each example
; the set is placed inside a loop that repeats the assingment 5 times
; so that you can se the effect. More about the loop statement in
; another tutorial!

; += increments a variable by a value:

begin 
  with var = 0
  loop repeat 5 set var += 1 end
  print var
end

; *= scales a variable by a value

begin 
  with var = 1
  loop repeat 5 set var *= 10 end
  print var
end

; &= adds a value to the end of a variable

begin 
  with var = {}
  loop repeat 5 set var &= random(128) end
  print var
end

; ^= appends a list to the end of a variable

begin 
  with var = {}
  loop repeat 5 set var ^= list(1, 2, random(128)) end
  print var
end

; @= adds a value to the front of a variable

begin 
  with var = {}
  loop repeat 5 set var @= random(128) end
  print var
end

; <= minimizes a value

begin 
  with var = 128
  loop repeat 5 set var <= random(128) end
  print var
end

; >= maximizes a value

begin 
  with var = -1
  loop repeat 5 set var <= random(128) end
  print var
end

