# ========================================================================
# scons [JUCEDIR=/usr/local/src/juce-1.43] [install]
# ========================================================================
# $Revision$
# $Date$ 

import os

opts = Options('grace.conf', ARGUMENTS)

opts.AddOptions(PathOption('JUCEDIR',
			   'Path to JUCE installation directory',
			   os.path.expanduser('~'),
			   PathOption.PathIsDir))
			   
opts.AddOptions(('SCHEME', 'Build Grace with Chicken Scheme embedded.', 0))

opts.AddOptions(('DEBUG', 'Build Grace with JUCE debug library.', 0))

env=Environment(options = opts) 

opts.Save('grace.conf', env)

Help(opts.GenerateHelpText(env))

sources = ['Buffer.cpp', 'Console.cpp', 'Editor.cpp',
           'Grace.cpp', 'Layer.cpp',
           'Resources.cpp', 'Plotter.cpp', 'Points.cpp',
           'Syntab.cpp', 'Syntax.cpp']

if (env['SCHEME']) :
    env.Append(CPPDEFINES = ['SCHEME'])
    sources = sources + ['Scheme.cpp', 'ChickenBridge.cpp', 'Midi.cpp', 'Toolbox.cpp']
    lispfiles = []
else :
    sources = sources + ['Lisp.cpp']
    lispfiles = ['asdf.lisp', 'grace.asd', 'grace.lisp', 'gray.lisp',
                 'socketserver.lisp']

if (env['DEBUG']) :
    jucelibname='jucedebug'
else :
    jucelibname='juce'
    env.Append( CPPDEFINES = 'NDEBUG' )

# Platform normalization and checks

if (env['PLATFORM'] == 'darwin') :
    # DARWIN
    execdir = 'build/Grace.app/Contents/MacOS'
    datadir = 'build/Grace.app/Contents/Resources'
    # ppc has to use g++ 3.3, CXXVERSION doesnt work.
    if (os.uname()[4] == 'Power Macintosh') :
        env.Replace(CXX = 'g++-3.3')
        env.Append(CPPDEFINES = ['PPC'])
    env.Append(FRAMEWORKS = ['Carbon', 'CoreServices', 'CoreAudio', 
                             'CoreMidi', 'ApplicationServices',
                             'AGL', 'QuickTime', 'IOKIT'] ,        
               CPPDEFINES = ['MACOSX'])
elif ( env['PLATFORM'] == 'posix' ) :
    # LINUX
    execdir = '/usr/local/bin'
    datadir = '/usr/local/lib/grace'
    env.Append(CPPDEFINES = ['LINUX', 'HAVE_CONFIG_H'],
               CPPPATH = ['/usr/X11R6/include'],
               LIBPATH = ['/usr/X11R6/lib'],
               )
    con = Configure(env)
    if (not con.CheckLib('freetype') ) :
        print 'Aborting: freetype library not found'
        Exit(1)
    if (not con.CheckLib('GLU') ) :
        print 'Aborting: GLU (X11) library not found'
        Exit(1)
    if (not con.CheckLib('GL') ) :
        print 'Aborting: GLU (X11) library not found'
        Exit(1)
    if (not con.CheckLib('asound') ) :
        print 'Aborting: asound (ALSA) library not found'
        Exit(1)
    env = con.Finish()
elif ( env['PLATFORM'] == 'win32' ) :
    # WINDOZE
    execdir = 'build/Grace'
    datadir = 'build/Grace/Resources'
    env.Append(CPPDEFINES = ['WINDOWS'])
else :
    print 'Unsupported platform: ',  env['PLATFORM']
    Exit(1)

# Build

BuildDir('build', 'src', duplicate = 0)

# Always add -DVERSION=nnn to compile definitions. this little hack taken from:
# http://svn.python.org/projects/sandbox/trunk/setuptools/setuptools/command/egg_info.py

def get_revision_string ():
    rev=0
    p = os.path.join(os.curdir,'.svn','entries')
    if os.path.exists(p) :
        f = open(p, 'r')
        data = f.read()
        f.close()
        data = map(str.splitlines,data.split('\n\x0c\n'))
        del data[0][0] 
        rev = max([int(d[9]) for d in data if len(d)>9 and d[9]]+[0])
    return str(rev)

env.Append(CPPDEFINES = ['VERSION=' + get_revision_string() ] )

env.Append(CPPPATH = ['src', env['JUCEDIR']],
           LIBPATH = [os.path.join(env['JUCEDIR'],'bin')]
           )

con = Configure(env)

if (env['SCHEME']) :
    if ( not con.CheckLib('chicken') ) :
        print 'Cannot find chicken  library: ', env['LIBPREFIX']+'chicken'+env['LIBSUFFIX']
        Exit(1)



# Check for juce.h

if ( not con.CheckCXXHeader('juce.h') ) :
    print 'Cannot find JUCE include file: juce.h'
    print 'Try passing JUCE directory to SCons: scons JUCEDIR=/path/to/juce'
    Exit(1)

# Check for libjuce.a
if ( env['PLATFORM'] == 'win32' ) :
    if ( not con.CheckLib('jucelib_static_Win32') ) :
        print 'Cannot find JUCE library: ', env['LIBPREFIX']+'jucelib_static_Win32'+env['LIBSUFFIX']
        print 'Try passing JUCE directory to SCons: scons JUCEDIR=/path/to/juce'
        Exit(1)
else :
    if ( not con.CheckLib( jucelibname ) ) :
        print 'Cannot find JUCE library: ', env['LIBPREFIX']+jucelibname+env['LIBSUFFIX']
        print 'Try passing JUCE directory to SCons: scons JUCEDIR=/path/to/juce'
        Exit(1)

env = con.Finish()  # this updates env with lib info

exe = env.Program( 'build/grace', [os.path.join('build', x) for x in sources])

# Installation

def install_docs() :
    srcdocs = []
    dstdocs = []
    for root,dirs,files in os.walk('doc') :
        if ('.svn' in dirs) : dirs.remove('.svn')
        for f in files :
            p = os.path.join(root,f)
            dstdocs += [os.path.join(datadir,p)]
            srcdocs += [p]
    return env.InstallAs(dstdocs,srcdocs)

def install_lisp() :
    return env.Install(os.path.join(datadir,'grace'),
                       [os.path.join('src', f) for f in lispfiles])

def install_exec() :
    return env.Install(execdir, exe)

if ('install' in COMMAND_LINE_TARGETS) :
    env.Alias('install-exec', install_exec())
    env.Alias('install-docs', install_docs())
    env.Alias('install-lisp', install_lisp())
    env.Alias('install', ['install-exec', 'install-docs', 'install-lisp'])
elif (env['PLATFORM'] in ['darwin', 'win32']) :
    # always update the app's dir with the current executable
    env.Alias('install-exec', install_exec())

