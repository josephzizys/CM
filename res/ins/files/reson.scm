(definstrument (reson startime dur pitch amp numformants indxfun skewfun pcskew skewat skewdc
		      vibfreq vibpc ranvibfreq ranvibpc degree distance reverb-amount data)
  ;; data is a list of lists of form '(ampf resonfrq resonamp ampat ampdc dev0 dev1 indxat indxdc)
  (let* ((beg (seconds->samples startime))
	 (end (+ beg (seconds->samples dur)))
	 (carriers (make-vector numformants))
	 (modulator (make-oscil :frequency pitch))
	 (ampfs (make-vector numformants))
	 (indfs (make-vector numformants))
	 (c-rats (make-vector numformants))
	 (frqf (make-env :envelope (stretch-envelope skewfun 25 (* 100 (/ skewat dur)) 75 (- 100 (* 100 (/ skewdc dur))))
			 :scaler (hz->radians (* pcskew pitch)) :duration dur))
	 (totalamp 0.0)
	 (loc (make-locsig degree distance reverb-amount))
	 (pervib (make-triangle-wave :frequency vibfreq
				     :amplitude (hz->radians (* vibpc pitch))))
	 (ranvib (make-rand-interp :frequency ranvibfreq
				   :amplitude (hz->radians (* ranvibpc pitch)))))
    ;; initialize the "formant" generators
    (do ((i 0 (1+ i)))
	((= i numformants))
      (set! totalamp (+ totalamp (list-ref (list-ref data i) 2))))
    (do ((i 0 (1+ i)))
	((= i numformants))
      (let* ((frmdat (list-ref data i))
	     (freq (cadr frmdat))
	     (ampf (car frmdat))
	     (rfamp  (list-ref frmdat 2))
	     (ampat (* 100 (/ (list-ref frmdat 3) dur)))
	     (ampdc (- 100 (* 100 (/ (list-ref frmdat 4) dur))))
	     (dev0 (hz->radians (* (list-ref frmdat 5) freq)))
	     (dev1 (hz->radians (* (list-ref frmdat 6) freq)))
	     (indxat (* 100 (/ (list-ref frmdat 7) dur)))
	     (indxdc (- 100 (* 100 (/ (list-ref frmdat 8) dur))))
	     (harm (inexact->exact (round (/ freq pitch))))
	     (rsamp (- 1.0 (abs (- harm (/ freq pitch)))))
	     (cfq (* pitch harm)))
	(if (zero? ampat) (set! ampat 25))
	(if (zero? ampdc) (set! ampdc 75))
	(if (zero? indxat) (set! indxat 25))
	(if (zero? indxdc) (set! indxdc 75))
	(vector-set! indfs i (make-env :envelope (stretch-envelope indxfun 25 indxat 75 indxdc) :duration dur
				       :scaler (- dev1 dev0) :offset dev0))
	(vector-set! ampfs i (make-env :envelope (stretch-envelope ampf 25 ampat 75 ampdc) :duration dur
				       :scaler (* rsamp amp (/ rfamp totalamp))))
	(vector-set! c-rats i harm)
	(vector-set! carriers i (make-oscil :frequency cfq))))
    (ws-interrupt?)
    (run
     (lambda ()
       (do ((i beg (1+ i)))
	   ((= i end))
	 (let* ((outsum 0.0)
		(vib (+ (triangle-wave pervib) (rand-interp ranvib) (env frqf)))
		(modsig (oscil modulator vib)))
	   (do ((k 0 (1+ k)))
	       ((= k numformants))
	     (set! outsum (+ outsum
			     (* (env (vector-ref ampfs k))
				(oscil (vector-ref carriers k) 
				       (+ (* vib (vector-ref c-rats k))
					  (* (env (vector-ref indfs k)) modsig)))))))
	   (locsig loc i outsum)))))))
