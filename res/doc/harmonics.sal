;
;; Composing with the harmonic series
;

; Harmonics are easy to work with: to convert a harmonic number into a
; frequncy you simply multiply a fundamental (in hertz) by a harmonic
; number. this hertz value can then be converted into keys or notes

loop with fund = 110, harm1 = 1, harm2 = 16
  for harm from harm1 to harm2
  for freq = fund * harm
  for keyn = key(freq)
  for name = note(keyn)
  print "harm=", harm, " freq=", freq,
        " key=", keyn, " note=", name
  end

; Harmonics gesture. lets use this idea to create a four voice texture
; that plays the harmonics starting with each new prime number in the
; series:

define process harmline (note, beat, harm1, harm2)
  run with fund = hz(note), 
           ryth = beat * 4
    for harm from harm1 to harm2
    for freq = fund * harm
    for knum = key( freq)
    send "mp:midi", dur: ryth, key: knum, chan: harm1
    wait ryth
  end

send "mp:tuning" , 12

begin
  with primes = {2 3 5 7 11 } 
  loop for p in primes
    sprout harmline( "c1", 1 / p, p, p * 4)
  end
end

; define a function that converts a range of harmonic numbers into a
; list of key numbers based on a fundamental keynumber:

define function keyharms (fundkey, harm1, harm2)
  loop with l = {}, f = hz(fundkey)
    for h from harm1 to harm2
    set l &=  f * ( h / harm1)
    finally 
    return key(l)
  end

print keyharms(60, 1, 8)

print keyharms(60, 8, 16)

print note( keyharms(60, 8, 16) )

; keyharms2 does the same but for a list of harmonic numbers

define function keyharms2 (fundkey, harms)
  loop with l = {}, f = hz(fundkey)
    for harm1 = first(harms)
    for h in harms
    set l &=  f * ( h / harm1)
    finally 
    return key(l)
  end

print keyharms2(60, {17 19 23 27 31 34} )

; we can turn a list of keynumbers it into a scale by repeating it
; over differnet octaves

define function to-scale(keys, numoct)
  loop with res = {}
    for i below numoct
    set res ^= plus(keys, 12 * i)
    finally return res
  end

print to-scale( keyharms(60, 8, 16), 3 )

; TODO: design a process that plays the series in some musica way

;
;; Exponentially stretched harmonics Etude (Michael Klingbeil)
;

define function distort-harmonics (fund, distort)
  loop with spec = {}
    for h from 1 below floor( 25.0 / distort)
    if odds( 0.9 * distort) then
    set spec &= key(fund * h ^ distort)
    finally return spec
  end

print note( distort-harmonics(110, .5) )

define process arpeggiate-exprhy (keynums, time, rate,
                                  midpoint-frac, amplow,
                                  amphi, legato, bass-legato,
                                  bass-cutoff, last-legato)
  run with segn = length( keynums),
      last = segn - 1,
      midpoint = int( segn * midpoint-frac),
      ; deltas below midpoint follow one curve, above another.
      deltas = append( segs( midpoint,
                            midpoint-frac * time,
                            1, rate),
                       segs( segn - midpoint,
                            (midpoint-frac - 1 ) * time,
                            1,
                            1 / rate))
    for i from 0
    for k in keynums
    for d in deltas
    for r = #? (k < bass-cutoff, 
                bass-legato, 
                #?( i = last, last-legato * d, legato * d))
    for a = rescale (i, 0, last,  amphi, amplow)
    send "mp:midi", key: k, amp: a, dur: r
    wait d
  end

define process arpa-harmonic (note, dur, gap)
  ; spawn overlapping arpeggios with mean duration of dur and mean
  ; gap between arpeggio starts of gap seconds. each arpeggio is
  ; upward with the general direction of arpeggio starting notes
  ; moving downward
  run with fund = hz( note)
    for distort from 0.7 below 1.05 by 0.05
    for notes = distort-harmonics( fund, distort)
    sprout
    arpeggiate-exprhy( notes,
                       vary( dur, 0.1) * distort,
                       between( 4.0, 0.25),
                       between( 0.3, 0.6),
                       0.3,
                       0.8,
                       dur * distort * 0.7,
                       2.0,
                       59,
                       1.0)
    wait vary( gap, 0.4)
  end

send "mp:tuning", 6

sprout arpa-harmonic( "g1", 7.0, 5.0) 

sprout list( arpa-harmonic( "g1", 7.0, 5.0) ,
             arpa-harmonic( "g1", 7.0, 5.0) )

