;;; -*- syntax: Sal2; -*-

; Create empty plot window, then Control-click in plot window to add points...

plot()

; export points to variable 

variable mydata = plot-data("Untitled Plot")

; Create a titled plot

plot(title: "Hi Ho!", points: {0 0 .25 1 .75 1 1 0})

; Create a plot with two layers of points

plot({0 0 .25 1 .75 1 1 0}, {0 0 1 1})

; Customize axes, add three named layers of points

plot(title: "My envelopes",
     xaxis: "percent",
     yaxis: "unit",
     layer: {0 0 25 .9 75 .9 100 0}, title: "ramp",
     layer: {0 1 5 .5 10 .1 100 0}, title: "expt",
     layer: {0 0 50 1 100 0}, title: "updown"
     )

; a two layered plot, each layer with its own style 

loop with poi = {}
  for i to 100 by 10 
  set poi ^= list(i, random(1.0))
  finally
  plot(title: "Hidy Ho!",
       xaxis: "percent",
       yaxis: "unit",
       layer: {0 0 25 .9 80 .5 100 0}, style: "envelope",
       layer: poi, style: "points")
end

; Piano roll plot of 5-field note data with duration on time axis
; and a constrained keynum axis

loop with poi = {}, amp = .7
  repeat 20
  for beg = 0 then (beg + random(1.0))
  for dur = pick(.1, .2, .3)
  for key = between(60, 96)
  for chan = random(16)
  set poi &= list(beg, dur, key, amp, chan)
  finally
  plot(title: "My Notes",
       fields: {{time seconds} {dur time} {"keynum" 60 96}
                {amplitude unit} {chan 0 15}},
       xaxis: {time dur},
       yaxis: "keynum",
       style: "hbox", layer: poi)
end

;
;; Compute some layers on the fly
;

begin with p1 = {}, p2 = {}, p3 = {}
  loop for x from 0 to 1 by .2
    set p1 ^= list(x, random(1.0))
  end
  loop for x from 0 to 1 by .1
    set p2 ^= list(x,x)
  end
  loop for x from 0 to 1 by .25
    set p3 ^= list(x, expt(10, - x))
  end
  plot(p1, p2, p3)
end

;
;; Plot a 'mean distribution' and its histogram in the same window
;

begin with maxh = 0,
           hist = make-list(100, 0),
           rans = {}, bars = {}
  loop for x from 0 below 100
    for y = floor( (random(100) + random(100)) * .5)
    set rans ^= list(x, y)
    set hist[y] += 1
  end 
  
  set maxh = apply(max, hist)

  loop for y in hist for x from 0
    if (y > 0) 
      set bars ^= list(x, (y / maxh) * 100)
    end
  end

  plot(title: "Mean distribution and histogram",
       x-axis: :percentage,
       y-axis: :percentage,
       layer: rans, style: :point,
       layer: bars, style: :impulse)
end

; plot a pretty picture of a "sampled sine wave"

begin with wave = {}, samp = {}
  loop for x from 0 to 1 by .01
    for r = (2 * pi * x)
    set wave ^= list(r, sin(r))
  end

  loop for x from 0 to 1 by .05
    for r = (2 * pi * x)
    set samp ^= list(r, sin(r))
  end

  plot(x-axis: list( 0, ( 2 * pi), ( pi / 2), 2),
       y-axis: {-1 1 .5},
       layer: wave, style: :line,
       layer: samp, style: :vlineandpoint
      )
end

; michael klingbeil's stretched harmonics example


function arpeggiate-exprhy(keynums, offset, duration, rate, midpoint-frac,
                           amplow, amphi, legato, bass-legato,
                           bass-cutoff, last-legato)
  with segn = length(keynums),
       lastn = segn - 1,
       midpoint = floor(segn * midpoint-frac),
       ;; rhythms below midpoint follow one curve, above another.
       rhyts = append(segs(midpoint, (midpoint-frac * duration), 1, rate),
                       segs((segn - midpoint),
                            ((1 - midpoint-frac) * duration),
			                            1 ,
                             (1 / rate))),
       lastn = segn - 1,
       data = {}
 
  loop with time = 0
    for i from 0
    for k in keynums
    for d in rhyts
    for r = #?((k < bass-cutoff),
               bass-legato,
               #?((i = lastn),
                  (last-legato * d),
                  (legato * d)))
    for a = between(0.45, 0.5)
    set data &= list(offset + time,
                     k,
                     r,
                     a),
     	  time += d
  end
  data
end

function distort-harmonics(fund, distort)
  loop with data = {}
    for h from 1 below floor(25.0 / distort) 
    if (odds(0.9 * distort))
      set data &= key(fund * expt(h , distort))
    end
  finally data
  end
end

function arpa-harmonic (fundnote, dur, gap)
  ;; spawn overlapping arpeggios with mean duration of dur and mean
  ;; gap between arpeggio starts of gap seconds. each arpeggio is
  ;; upward with the general direction of arpeggio starting notes
  ;; moving downward
  with result = {}

  function sorter (a,b) (first(a) < first(b)) end

  loop with fund = hz(fundnote), time = 0
    for distort from 0.7 below 1.05 by 0.05
    for notes = distort-harmonics(fund, distort)
    for arpa = arpeggiate-exprhy(notes,
                                 time,
                                 vary(dur, 0.1) * distort,
                                 between(4.0, 0.25),
                                 between(0.3, 0.6),
                                 0.3,  ; amplow
                                 0.8,  ; amphi
                                 (dur * distort * 0.7), ; bass legato
                                 2.0,   ; legato 
                                 59,    ; bass cutoff
                                 1.0)
    set result = sort!(append(result, arpa), sorter),
     	  time += vary(gap, 0.4)
    end
  result
end 

distort-harmonics(hz("g3"), .7)

; now create two layers of harmonically generated notes

plot(title: "Arpa Harmonic",
     style: :hbox,
     fields: {{start seconds} {keyn note} {dur start} {amp unit}},
     layer: arpa-harmonic("g1", 7.0, 5.0),
     layer: arpa-harmonic("g1", 7.0, 5.0)
     )


