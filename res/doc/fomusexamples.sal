;
;; Simple process example
;

define process examp1 (n, r)
  run repeat n
    send "fms:note", dur: r, pitch: between(48, 73)
    wait r
  end

sprout examp1(16, 1/2), "fomus", clear: #t, run: #t

;
;; Staccato and Accent Marks
;

define process examp2 ()
  run 
    with marks = {#f {"."} {">"}}
    repeat 21
    send "fms:note",
 		      dur: #?(elapsed() < 10, 1/2, 1),
  		     pitch: between(48, 73),
         marks: marks[random(3)]
    wait 1/2
  end

begin
  with parts = {{:id "apart" :name "Piano" :inst "piano"}}
  sprout examp2(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Quartertones
;

define process examp3 ()
  run repeat 21
    send "fms:note",
         dur: #?(elapsed() < 10, 1/2, 1),
         pitch: 70 + (random(4) / 2)
    wait 1/2
  end

begin
  with parts = {{:id "apart" :name "Piano" :inst "piano"}},
       sets = {:quartertones #t}
  sprout examp3(), "fomus", parts: parts, settings: sets, clear: #t, run: #t
end

;
;; Polyphony with Slurs
;

define process examp4 ()
  run for v from 1 to 2
    loop for off from 0 to 10 by 1/2
      send "fms:note", time: off,
  		       dur: #?(off < 10, 1/2 , 1),
  		       pitch: #?(v = 2, between(35, 60), between(60, 85)),
  		       voice: v,
           marks: odds(.333, {"(.."})
    end
  end
	
begin 
  with parts = {{:id "apart" :name "Piano" :inst "piano"}}
  sprout examp4(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Piano Chords
;

define process examp5 ()
  run repeat 3
    loop for off from 0 to 10 by 1/2
      send "fms:note", time: off,
           dur: #?(off < 10, 1/2, 1),
  		       pitch: between(48, 73),
           voice: {1 2}
    end
  end

begin
  with parts = {{:id "apart" :name "Piano" :inst "piano"}}
  sprout examp5(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Quantizing/Chords
;

define process examp6 ()
  run
    repeat 10
    for tim = random(30.0)
    for dur = 1 + random(3.0)
    send "fms:note", time: tim,
         dur: dur,
         pitch: between(60, 85)
  end
    
begin
  with parts = {{:id "apart" :name "Piano" :inst "piano"}}
  sprout examp6(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Quantizing/Voices
;

define process examp7 ()
  run
    repeat 10
    for tim = random(30.0)
    for dur = 1 + random(3.0)
    send "fms:note", time: tim,
         dur: dur,
         pitch: between(60, 85),
         voice: {1 2 3}
  end
    
begin
  with parts = {{:id "apart" :name "Piano" :inst "piano"}}
  sprout examp7(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Mark Objects
;

define process examp8-notes ()
  run
    for o from 0 to 20 by 1/2
    send "fms:note", time: o, dur: 1/2, pitch: 72, part: "0"
    send "fms:note", time: o, dur: 1/2, pitch: 48, part: "1"
  end
    
define process examp8-marks ()
  run repeat 8
    send "fms:mark", part: odds(.5, "0", "1"),
		       time: random(20.0),
		       marks: {"^"}
  end

begin
  with parts = {{:name "Flute" :inst "flute" :id "0"} 
                {:name "Tuba" :inst "tuba" :id "1"}}
  sprout list(examp8-notes(), examp8-marks()), "fomus", 
         parts: parts, clear: #t, run: #t
end

;
;; Percussion 1
;

define process examp9 ()
  run for o from 0 to 20 by 1/2 
    send "fms:note", time: o, dur: 1/2,
         pitch: odds(.5, "wb1", "wb2")
  end

begin
  with parts = {{:id "perc" :name "Percussion"
                 :inst {:template "percussion" :percinsts
                        {{:id "wb1" :template "low-woodblock" :perc-note 57}
                         {:id "wb2" :template "high-woodblock" :perc-note 64}}}}}
  sprout examp9(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Percussion 2
;

define process examp10 ()
  run for o from 0 to 20 by 1/2 
    send "fms:note", time: o, dur: 1/2,
         pitch: odds(.5, "wb1", "wb2")
  end

begin
  with parts = {{:id "perc" :name "Percussion"
                 :inst {:template "percussion" :percinsts
                        {{:id "wb1" 
                          :template "low-woodblock" 
                          :perc-note 57 
                          :perc-voice 2}
                         {:id "wb2" 
                          :template "high-woodblock"
                          :perc-note 64
                          :perc-voice 1}}}}}
  sprout examp10(), "fomus", parts: parts, clear: #t, run: #t
end

;
;; Percussion with Automatic Durations
;

; this feature coming soon

;
;; (Budget) Orchestra Score
;

define process examp11-notes (p)
  run
    for n in {60 62 64}
    for o from 0
    send "fms:note", part: p, dur: 1, pitch: n
    wait 1
  end
 
define process examp11-parts (ps)
  run 
    for p in ps
    sprout examp11-notes(p)
  end

begin
  with parts = {{:id "fl1" :name "Flute 1" :inst "flute"}
	               {:id "fl2" :name "Flute 2" :inst "flute"}
	               {:id "cl2" :name "Clarinet 1" :inst "bflat-clarinet"}
	               {:id "vln1" :name "Violin 1" :inst "violin"}
	               {:id "vln2" :name "Violin 2" :inst "violin"}
	               {:id "vc1" :name "Cello 1" :inst "cello"}
	               {:id "vc2" :name "Cello 2" :inst "cello"}
                {:id "tba" :name "Tuba" :inst "tuba"}},
       sets = {:layout "orchestra"}
  send "fms:meas", time: 0, dur: 3
  sprout examp11-parts({"fl1" "fl2" "cl2" "vln1" "vln2" "vc1" "vc2" "tba"}), 
                       "fomus", parts: parts, settings: sets, clear: #t, run: #t
end

;
;; Small Ensemble Score
;

define process examp12-notes (p)
  run
    for n in {60 62 64}
    for o from 0
    send "fms:note", part: p, dur: 1, pitch: n
    wait 1
  end
 
define process examp12-parts (ps)
  run 
    for p in ps
    sprout examp12-notes(p)
  end

begin
  with parts = {{:id "fl1" :name "Flute 1" :inst "flute"}
	               {:id "fl2" :name "Flute 2" :inst "flute"}
	               {:id "cl2" :name "Clarinet 1" :inst "bflat-clarinet"}
	               {:id "vln1" :name "Violin 1" :inst "violin"}
	               {:id "vln2" :name "Violin 2" :inst "violin"}
	               {:id "vc1" :name "Cello 1" :inst "cello"}
	               {:id "vc2" :name "Cello 2" :inst "cello"}
                {:id "tba" :name "Tuba" :inst "tuba"}},
       sets = {:layout "small-ensemble"}
  send "fms:meas", time: 0, dur: 3
  sprout examp12-parts({"fl1" "fl2" "cl2" "vln1" "vln2" "vc1" "vc2" "tba"}), 
                       "fomus", parts: parts, settings: sets, clear: #t, run: #t
end

;
;; 2 Part Polyphony
;

define process polygen (len, minp, maxp)
  run repeat len
    send "fms:note", voice: {1 2},
                     pitch: between(minp, maxp),
                     dur: 1/4
    wait 1/4
  end

begin
  sprout list(polygen(40, 50, 80),
              polygen(40, 40, 70)), "fomus", clear: #t, run: #t
end

;
;; Generate Prime Harmonics Gesture
;

define process harmonics (note, beat, harm1, harm2, pname)
  run
    for harm from harm1 to harm2
    for knum = key(hz(note) * harm)
    send "fms:note", dur: rhythm(beat), pitch: knum, part: pname
    wait rhythm(beat)
  end

begin
  with parts = {{:id "c2" :name "Cello" :inst "cello"}
                {:id "c3" :name "Cello" :inst "cello"}
                {:id "c5" :name "Cello" :inst "cello"}
                {:id "c7" :name "Cello" :inst "cello"}
                {:id "c11" :name "Cello" :inst "cello"}},
       sets = {:quartertones #t :tuplets 11},
       procs = {}
  loop 
    for p in {2 3 5 7 11}
    for pn in {"c2" "c3" "c5" "c7" "c11"}
    set procs &= harmonics("c1", 1 / p, p, p * 4, pn)
  end
  sprout procs, "fomus", parts: parts, settings: sets, clear: #t, run: #t
end
