;;; -*- syntax: Sal2;  -*-

;
;; Defining Variables
; 

; A variable is a symbol that stands for a value. There are two types
; of variables: global variables are variables that you create using
; the define command; local variables are variables that you declare
; using a 'with' statement in code blocks like 'begin...end',
; 'loop...end', or 'run...end'.  More about local variables in just a
; bit...

;
;; Global variables
;

; A global variable is a variable that you define so that all your
; code can reference it. For example, if you were working on a
; twelve-tone composition you might want to create a global variable
; to hold the row on which the composition is based. That way all the
; code you develop could access that row by referencing global
; variable its stored int

; Use the 'variable' command to define global variables. Here
; is the definition of a global variable that holds a twelve-tone
; row. Put your cursor at the end of the line and press COMMAND-Enter
; to execute the definition:

variable row = {0 11 1 10 2 9 3 8 4 7 5 6}

print( "Prime row: ", row, ", retograde row: ", reverse(row))

; The 'define variable' command takes the name of the new global
; variable, followed by an optional '= <value>' initialization.  If
; you don't provide an initial value for global variable it is
; automatically set to #f (boolean false).  Other facts: the value
; after the = can be any SAL sexpr, and you can define more than one
; variable at a time using a comma between each variable
; definition. In this next example we define two globals, the first
; holds a row type we randomly choose from four possible row types
; (using a string to represent the prime retrograde inversion and
; retrograde-inversion row forms) and the second global to hold a
; transposition offset:

variable row-form = pick( "p", "r", "i", "ri") ,
         row-transp = between(0, 12)
  
;
;; Local variables
;

; Sometimes a variable is needed only for a particular set of
; statements.  A local variable is a temporary variable that is only
; defined within a specific block of code.  Use the 'with' statement
; to declare local, temporary variables inside 'begin...end', 'loop'
; or 'run' blocks. These variables only exist inside the lexical scope
; of the block.  Here is an example of two local variables x and
; y. Place your cursor after the word 'end' and press COMMAND-Enter
; several times:

begin
  with x = random(12) ,
       y = x + 12
  list(x,y)
end

; Its clear from the print statement that when the block executes the
; variables x and y have values (or else the print statement wouldn't
; work!). But notice that if you try to evaluate either x or y OUTSIDE
; the block an error occurs because those variables don;t exist
; outside the block in which they were (locally) declared. Executing
; this next statement will trigger an error message because there is
; no global variable called x (unless you created one yourself!)

x

; Notice that a variable declared inside an inner block will shadow
; the same variable declared in an outer block. In this example, both
; blocks declare a variable 'x' but the print statements clearly show
; that they are different variables!

begin
  with x = 1
  print("outer block, x=", x)
  begin
    with x = 2
    print( "inner block, x=", x)
  end
  print( "outer block, x=", x)
end

;
;; Variable assignment: the 'set' command
;

; What if want to assign a differnt value to an existing variable?
; For global variables, on solution might be to re-execute the define
; commands with a different inital value. Another way is to ASSIGN the
; variable a new value using the SET command.

variable row = {11 10 9 8 7 6 5 4 3 2 1 0},
         row-form = "p",
         row-transp = 0

print( "row=", row, " row-form=", row-form, " row-transp=", row-transp)

set row = {0 1 2 3 4 5 6 7 8 9 10 11},
    row-form = "r",
    row-transp = between(6, 12)

print( "row=", row, " row-form=", row-form, " row-transp=", row-transp)


; On first appearance the 'set' command looks very much like the
; define variable command, including the ability to operate on more
; than one variable at a time. But there are actually several
; important differences between define and set. First, and most
; importatly, set does not actualy CREATE variables, it simply sets an
; existing one to a new value. Secondly, the 'set' command supports
; many more 'assignment operators' than define does. The set operators
; are:

;   =       assign a variable a value
;   +=      increment a variable by an amount
;   *=      scale a variable by an amount
;   &=      add a value to the end of a variable's list
;   ^=      append a list to the end of a variable's list
;   @=      add a value to the front of a variable's list
;   <=      minimize a variable 
;   >=      maximize a variable 

; Here is an example of each set operator in action. In each example
; the set is placed inside a loop that repeats the assingment 5 times
; so that you can se the effect. More about the loop statement in
; another tutorial!

; += increments a variable by a value:

begin 
  with var = 0
  loop repeat 5 set var += 1 end
  var
end

; *= scales a variable by a value

begin 
  with var = 1
  loop repeat 5 set var *= 10 end
  var
end

; &= adds a value to the end of a variable

begin 
  with var = {}
  loop repeat 5 set var &= random(128) end
  var
end

; ^= appends a list to the end of a variable

begin 
  with var = {}
  loop repeat 5 set var ^= list(1, 2, random(128)) end
  var
end

; @= adds a value to the front of a variable

begin 
  with var = {}
  loop repeat 5 set var @= random(128) end
  var
end

; <= minimizes a value

begin 
  with var = 128
  loop repeat 5 set var <= random(128) end
  var
end

; >= maximizes a value

begin 
  with var = -1
  loop repeat 5 set var <= random(128) end
  var
end

;
;; Defining Functions
;

; Your compositional work will require you to design and implement new
; functions to accomplish musical tasks. We have already learned how
; to use them (by calling them with input values) but we don't know
; anything about how they are actually implemented.

; Recall that a function works by receiving arguments (input values)
; in its parameters, which are special variables in which it receives
; the data you pass it. The function then executes uses these
; parmeters its internal code (statements) that calculate a result
; that it returns back to you as the 'value' of the function call.
; The statements that the function executes are called the 'body' of
; the function: this is where the work happens. Any SAL statement can
; be used as the function's body, including the special 'return'
; statement that returns a value back to the caller. If the function
; requires more than one statement use a 'begin...end' statement as
; the function's body and then sequence as many statements as
; necessary inside the blocl. A begin...end can also be used to
; declare local local variables inside the function, if needed.

;; The 'function' command

; Use the 'function' command to create a new function. The
; command requires three pieces of information: (1) the name of the
; new function, (2) what input parameters it will take (if any) and
; (3) the body of the function that it will execute when it is
; called. Here is a first example of a function definition. The
; function is called 'knum->pc' because it converts an input keynum
; 0-127 into a pitch class 0-11 using the modulus operator '%'.
; The function declares one input parameter (knum). In the body 
; of the function you can execute any number of
; statements and the last statement will be returned as the value of
; the function. In our example below there is only one statment and
; so its value will be returned when we call the function.

; Put the cursor after the end and press COMMAND-Enter
; to execute the definition:

function key->pc (k)
  k % 12
end

; once the function is defined you can call it:

key->pc(60)

key->pc(61)

key->pc(59)

; This next little function demonstrates how to declare more than one
; parameter. It performs the opposite calculation of the first
; function: it returns a key givein a pc and a octave offset. The
; function declares two parameters: pc is the pitch class and octace is
; the keynum offset. 

function pc->key (pc, oct)
  pc + (12 * (oct + 1))
end

; note that the function adds 1 to the octave so that the middle-c
; octave number 4 produces key number 60...

print pc->key(0, 4)

; functions can use the with statement to decalre local variables.

function pc->note(pc, oct)
  with k = pc->key(pc, oct)
  note(k)
end

pc->note(0, 4)

pc->note(6, 2)

pc->note( random(12), between(2,8))

;
;; Predicate functions and conditional statements
;

; A 'predicate' is a function that returns true or false based on a
; test of its argument(s). Preicates often use what are called
; 'conditional statements' to accomplish their tasks.  The 'if then
; else' statement is the most flexble conditional: it consists of
; three parts: a test is first evaluated, if the test is true (not #f)
; then a 'then' statement is executed, otherwise an optional 'else'
; statement is executed. Here is the definition of a predicate
; function that returns true if its input key number is a black key,
; otherwise it returns false. Notice that the 'true' value that the
; function returns is the pitch class of the black key rather than
; boolean true. Since boolean logic says that any value that is not #f
; must, by definition, be true, the true value can be anything that is
; not stricly #f!  This is qute handy and allows our function to
; return useful information (the pitch class) when the key in question
; is actually a black key:

function black-key? (knum)
  with pc = key->pc(knum)
  if ( member( pc, {1 3 6 9 10}))
    pc
  else
    #f
  end
end

begin
  with k = random(128)
  print( "key: ", k, " is black: ", black-key?(k))
end

; Notice that, in the case of our last example, the then and the else
; clauses both execute a return statement. these clauses differ only
; in the value that is returned, not by the statements themselves. In
; a case like this is possible to use a single return statemnt that
; returns a conditional value. Recall that the conditional value is
; notated #?  (test, true, false) where test, true and false are all
; sexprs. If the test is true then the true value is used, otherwise
; the else value is used. Here is another, perhaps clearer, way to
; write the function:

function black-key? (knum)
  with pc = key->pc(knum),
       sw = member( pc, {1 3 6 9 10}) 
  #?( sw , pc, #f)
end

begin
  with k = random(128)
  print( "key: ", k, " is black: ", black-key?(k))
end

