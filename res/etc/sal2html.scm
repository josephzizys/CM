;;; **********************************************************************
;;; Copyright (C) 2010 Rick Taube
;;; This program is free software; you can redistribute it and/or   
;;; modify it under the terms of the Lisp Lesser Gnu Public License.
;;; See http://www.cliki.net/LLGPL for the text of this agreement.
;;; **********************************************************************

#|
(load "/Users/hkt/Software/xcm/res/etc/sal2html.scm")

(let ((d "/Users/hkt/Desktop/salexs/*.sal"))
  (do ((l (directory d) (cdr l)))
      ((null? l) #t)
    (format #t "~%~S" (car l))
    (sal2html (car l) #f #f)))

|#

;(require-extension posix)
;(define (date-and-time) (time->string (seconds->local-time (current-seconds))))

(define-macro (getchar x s)
 `(begin (set! ,x (read-char ,s))
	 (if (eof-object? ,x) 
	     (begin
	       ;; reached eof on .sal file
	       ;;(format out "</pre>~%")
	       (return-from-read #:eof)
	       ))))

(define (begspan out type)
  (format out "<span class=\"~A\">"
	  (keyword->string type)))

(define (endspan out . eol )
  (format out "</span>")
  (if (not (null? eol)) (newline out)))

(define-macro (cpwhite ch in ou bo)
  `(do ((+whites+ '(#\space #\tab #\return #\newline)))
       ((not (member ,ch +whites+)) #f)
     (write-char ,ch ,ou)
     (if (eq? ,ch #\newline) (set! ,bo #t)
	 (set! ,bo #f))
     (getchar ,ch ,in)))

(define (salhtmlheader out file source-url)
  (format out "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">
<head>
<meta http-equiv=\"content-type\" content=\"text/html; charset=iso-8859-1\"/>
<style type=\"text/css\" media=\"all\">
span.string  {color: #a11153;} 
span.output  {color: #black;} 
span.comment {color: #ce001a;}  
span.salkeyword {color: #9932cc} 
span.reserved {color: #950083;}
span.lispkeyword {color: #8a2f8f;}
span.command {color: #0000ff;}
span.constant {color: #5f9ea0;}
pre.salcode{}
</style>
<title>~A.html</title>
</head>
<body>
"
	  ;; pre.salcode{background: #f7f7f7;}
	  (pathname-name (or source-url file))
	  )
  (if source-url
      (format out "<p><a href=~S><span style=\"font-size:large;\">Download Source</a></span></p>"
              source-url))
  (format out "~%<hr/>"))

(define (salhtmlfooter out file)
 ;; <p style=\"font-size: smaller;\">Generated by <em>sal2html</em> ~A</p>~%
  (format out "<hr/>~%</body>~%</html>~%"
          ))

(define tokentypes 
  `(
    ;(#:constant "#t" "#f" "#?" )
    (#:salkeyword , (lambda (s l)
                      (char=? (string-ref s (- l 1)) #\:)))
    (#:lispkeyword , (lambda (s l)
                       (char=? (string-ref s 0) #\:)))   
    (#:reserved
    "begin" "function" "if" "loop" "process" "file"
    "set" "unless" "wait" "when" "with"
    "above" "below" "by" "downto" "else"
    "end"  "finally" "for" "from" "in" "repeat"
    "then" "to" "unless" "until" "variable" "wait" "when" "while" "with")
    ))

(define (toktype str len bol)
  (call/cc
   (lambda (return-from-toktype)
     (for-each (lambda (l)
		 (for-each (lambda (x)
			     (if (string? x)
				 (if (string=? str x) 
				     (return-from-toktype (car l)))
				 (if ( x str len)
				     (return-from-toktype (car l))))
			     )
			   (cdr l)))
	       tokentypes)
     #f)))

; (toktype "finally" 7 #t)
; (toktype "kokoko:" 7 #t)
; (toktype "process" 7 #t)

(define (htmlwritechar c out)
  (cond ((char=? c #\<) (format out "&lt;"))
	((char=? c #\>) (format out "&gt;"))
	((char=? c #\&) (format out "&amp;"))
	(else (write-char c out))))
	 
(define (htmlwritestring str out . args)
  (let ((len (if (null? args) (string-length str) (car args))))
    (do ((i 0 (+ i 1)))
	((= i len) #f)
      (htmlwritechar (string-ref str i) out))))

(define (colorizetok out str len bol)
  (let ((type (toktype str len bol)))
    (if type (begspan out type))
    (htmlwritestring str out len)
    (if type (endspan out))))
		   
(define STDOUT (current-output-port))

(define (stoh-loop sal out tty)
  (lambda (return-from-read)
    (do ((bol #t)
	 (chr #f)
	 (len #f)
	 (+delims+ '(#\" #\' #\# #\, #\; #\{ #\} #\[ #\] 
		     #\( #\) #\space #\tab #\return #\newline))
	 (str (make-string 256)))
	(#f #f)
      (getchar chr sal)
      ;; copy all white chars to output
      (cpwhite chr sal out bol)
      ;; chr now non-white char, possibly at bol
      ;;(format STDOUT "char ~S~%" chr)
      (cond ((char=? chr #\;)
	     (begspan out #:comment)
	     (do ()
		 ((char=? chr #\newline) #f)
	       (htmlwritechar chr out)
	       (getchar chr sal))
	     (endspan out #t)
	     (set! bol #t))
	    ((char=? chr #\")
	     (begspan out #:string)
	     (do ((x #f))
		 (x #f)
	       (htmlwritechar chr out)			  
	       (getchar chr sal)
	       (if (char=? chr #\") (set! x #t)))
	     (htmlwritechar chr out)
	     (endspan out)
	     (set! bol #f))
	    ((char=? chr #\#)
	     (begspan out #:constant)
	     (htmlwritechar chr out)
	     (getchar chr sal)
	     (htmlwritechar chr out)
	     (endspan out)
	     (set! bol #f))
	    (else
	     ;; gobble token to next delim, which may be chr
	     (set! len 0)
	     (do ()
		 ((or (member chr +delims+)
                      (eof-object? chr))
		  #f)
	       (string-set! str len chr)
               (set! chr (read-char sal)) ;(getchar chr sal)
	       (set! len (+ len 1)))
	     (if (> len 0)
		 (colorizetok out (substring str 0 len)
			      len bol))
             (if (eof-object? chr)(return-from-read #:eof))
	     ;; else write delimiter
	     (htmlwritechar chr out)
	     (if (member chr '(#\return #\newline))
		 (set! bol #t)
		 (set! bol #f))))))) 
 
(define (sal2html file html source-url )
  (let ((out #f)
	(sal #f)
        (tty (current-output-port)))
    (if (not html)
	(set! html (make-pathname #:type "html" #:defaults file)))
    (with-input-from-file file
      (lambda ()
	(set! sal (current-input-port))
	(if (file-exists? html) (delete-file html))
	(with-output-to-file html
	  (lambda ()
	    (set! out (current-output-port))
	    (salhtmlheader out file source-url)
	    (format out "<pre class=\"salcode\">~%")
	    (call/cc (stoh-loop sal out tty) )
	    (format out "</pre>~%")
	    (salhtmlfooter out file)
	    ))
	html))))
