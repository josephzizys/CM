;;; **********************************************************************

(define (plot . args)
  (let ((global #t)
	(debug #f)
	(title #f)
	(xaxis #f)
	(yaxis #f)
	(fields (list))
	(points #f)
	(fmat #f)
	(plots (list))
	(access (list))
	(style #f))
    (define (setplotstyle pl sty) (set-car! (list-tail pl 1) sty))
    (define (setplotcolor pl col) (set-car! (list-tail pl 2) col))
    (define (setplottitle pl tit) (set-car! (list-tail pl 3) tit))
    (do ((tail args (cdr tail)))
	((null? tail)
	 (set! plots (reverse plots)))
      (case (car tail)
	((#:title)
	 (if (null? (cadr tail))
	     (error "missing title value"))
	 (if global
	     (set! title (cadr tail))
	     (setplottitle (car plots) (cadr tail)))
	 (set! tail (cdr tail)))
	((#:fields)
	 (if (not global)
	     (error "fields is a global setting"))
	 (if (null? (cdr tail))
	     (error "missing fields value"))
	 (set! fields (cadr tail))
	 (if (not (pair? fields))
	     (error "fields is not a list" fields))
	 (if (< (length fields) 2)
	     (error "too few fields" fields))
	 (set! tail (cdr tail)))
	((#:values )
	 (if (not global)
	     (error "format is a global setting"))
	 (if (null? (cdr tail))
	     (error "missing format value"))
	 (set! fmat (cadr tail))
	 (set! tail (cdr tail)))
	((#:x-axis #:xaxis)
	 (let ((axis (if (null? (cdr tail)) (error "missing x-axis value")
		     (cadr tail))))
	   (if (not global) (error "found non-global x axis" axis))
	   ;;(set! axis (if (pair? axis) (cons 'x axis) (list 'x axis)))
	   (set! xaxis axis)
	   (set! tail (cdr tail))))
	((#:y-axis #:yaxis)
	 (let ((axis (if (null? (cdr tail)) (error "missing y-axis value")
		     (cadr tail))))
	   (if (not global) (error "found non-global y axis" axis))
	   ;;(set! axis (if (pair? axis) (cons 'y axis) (list 'y axis)))
	   (set! yaxis axis)
	   (set! tail (cdr tail))))
	((#:style)
	 (if (null? (cdr tail))
	     (error "missing style value"))
	 (cond ((not global)
		(setplotstyle (car plots) (cadr tail)))
	       (else
		(set! style (cadr tail))))
	 (set! tail (cdr tail)))
	((#:color)
	 (if (null? (cdr tail))
	     (error "missing color value"))
	 (if (not global)
	     (setplotcolor (car plots) (cadr tail))
	     (error "color is not a global plot option"))
	 (set! tail (cdr tail)))
	((#:debug)
	 (if (null? (cdr tail)) (error "missing debug value")
	     (set! debug (cadr tail)))
	 (set! tail (cdr tail)))
	(else
	 (if (pair? (car tail))
	     (let ((pdata (car tail)))
	       ;; plot is ((x y...) style color title)
	       (set! plots (cons (list pdata style #f #f) plots)))
	     (error "unknown plot setting" (car tail)))
	 (set! global #f) ; all done with global settings
	 ))
      ) ; end do
    
     (let ((port (open-output-string) 
		 ;;(if debug #t (open-output-string))
		 ))
      (format port "<plot")
      (if title (format port " title=\"~a\"" title))
      (format port ">") ; end <plot>
      (format port "<fields>")
      (cond ((null? fields)
	     ;; insure fields for each specified axis
	     (field->xml port #f xaxis 0 fmat)
	     (field->xml port #f yaxis 1 fmat))
	    (else
	     (do ((tail fields (cdr tail))
		  (index 0 (+ index 1)))
		 ((null? tail) #f)
	       (if (pair? (car fields))
		   (field->xml port (caar tail) (cdar tail) index fmat)
		   (field->xml port (car tail) (list) index fmat)))
	     ;; create the field access list for points
	     (set! access (layer-field-access xaxis yaxis fields))
	     ;; dont pass over a default access order
	     (if (or (equal? access '(0 1))
		     (equal? access '(0 1 2))
		     (equal? access '(0 1 2 3)))
		 (set! access (list)))))
      (format port "</fields>")
      (format port "<layers>")
      (unless (null? plots)
	(unless fmat (set! fmat (guess-data-format (caar plots))))
	(do ((tail plots (cdr tail)))
	    ((null? tail) #f)
	  (points->xml port (car tail) fmat access)))
      (format port "</layers>")
      (format port "</plot>")
      (cond ((not debug)
	     (ffi_plot_xml (get-output-string port))
	     (void))
	    (else
	     (get-output-string port)
	     )))))
; (plot )
; (plot :x-axis '(0 123) '(0 0 1 1) )
; (plot :style "lineandpoint" :x-axis '(0 123) '(0 0 1 1) )
; (plot :style "histogram" :x-axis '(0 123) '(0 0 1 1) :style "line"  '(0 0 2 2) :style "point" :color "red")

(define (layer-field-access xaxis yaxis fields)
  ;; return a list of (upto) four indexes (<x> <y> <x2> <y2>) that
  ;; determine the data fields to acess in the layer's points.
  (define (fieldpos name fields)
    ;; return the field's index from its name
    (do ((tail fields (cdr tail))
	 (pos 0 (+ pos 1))
	 (flag #f))
	((or flag (null? tail)) flag)
      (if (or (equal? (car tail) name)
	      (and (pair? (car tail)) (equal? (caar tail) name)))
	  (set! flag pos))))
  (cond ((not xaxis)
	 (cond ((not yaxis)
		'(0 1))
	       ((pair? yaxis)
		(list 0 (fieldpos (car yaxis) fields)
		      (fieldpos (cadr yaxis) fields)))
	       (else
		(list 0 (fieldpos yaxis fields)))))
	((pair? xaxis)
	 (cond ((not yaxis)
		(list (fieldpos (car xaxis) fields)
		      1 (fieldpos (cadr xaxis) fields)))
	       ((pair? yaxis)
		(list (fieldpos (car xaxis) fields)
		      (fieldpos (car yaxis) fields)
		      (fieldpos (cadr xaxis) fields)
		      (fieldpos (cadr yaxis) fields)))
	       (else
		(list (fieldpos (car xaxis) fields)
		      (fieldpos yaxis fields)
		      (fieldpos (cadr xaxis) fields)))))
	(else
	 (cond ((not yaxis)
		(list (fieldpos xaxis fields) 1))
	       ((pair? yaxis)
		(list (fieldpos xaxis fields)
		      (fieldpos (car yaxis) fields)
		      (fieldpos xaxis fields)
		      (fieldpos (cadr yaxis) fields)))
	       (else
		(list (fieldpos yaxis fields)
		      (fieldpos yaxis fields)))))))

(define (field->xml port name axisinfo indx fmat)
  (define (tostring x)
    (cond ((string? x) x)
	  ((keyword? x) (keyword->string x))
	  (else (format #f "~a" x))))
  (if (not name) (set! name (format #f "Field ~a" (+ indx 1))))
  (cond ((pair? axisinfo)
	 (format port "<field name=\"~a\"" (tostring name))
	 (do ((tail axisinfo (cdr tail))
	      (delim " axis=\"" " "))
	     ((null? tail)
	      (format port "\"/>") )
	   (display delim port)
	   (display (tostring (car tail)) port)))
	(axisinfo
	 (format port "<field name=\"~a\" axis=\"~a\"/>"
		 (tostring name)
		 (tostring axisinfo) ))
	((= indx 0)
	 ;; insure x field even if not specied. if only y data
	 ;; specified set x axis to ordinal
	 (if (member fmat '(:y y))
	     (format port "<field name=\"~a\" axis=\"ordinal\"/>" 
		     (tostring name))
	     (format port "<field name=\"~a\" axis=\"unspecified\"/>"
		     (tostring name))))
	((= indx 1)
	 ;; insure y field even if not specified
	 (format port "<field name=\"~a\" axis=\"unspecified\"/>"
		 (tostring name)))
	(else
	 ;; ignore unspecified z axis. shouldn't happen now!
	 ))
  (void))

; (axis->xml #t 'x)
; (axis->xml #t '(z x))
; (axis->xml #t '(x 0 1))
; (axis->xml #t '(x 1))
; (axis->xml #t '(x 1 0))
; (axis->xml #t '(x -1 1 .5))
; (axis->xml #t '(x 10 1000 -2))

(define (points->xml port plot fmat access)
  ;; plot = (pointdata ptype style color)
  (let ((data (car plot))
	(styl (cadr plot))
	(colr (caddr plot))
	(titl (cadddr plot)))
    (define (tostring x)
      (if (keyword? x) (keyword->string x) (format #f "~a" x)))	    
    (format port "<points")
    (if styl
	(format port " style=\"~a\"" (tostring styl))
	(if (equal? fmat #:y)
	    (format port " style=\"impulses\""))
	)
    (if colr (format port " color=\"~a\"" (tostring colr)))
    (if titl (format port " title=\"~a\"" (tostring titl)))
    (if (not (null? access))
	(do ((tail access (cdr tail))
	     (delim " access=\"" " " ))
	    ((null? tail) (display "\""  port))
	  (display delim port)
	  (display (car tail) port)))
    (format port ">")
    (cond ((pair? (car data))
	   ;; each sublist is a point record (single line )
	   (do ((tail data (cdr tail)))
	       ((null? tail) #f)
	     (format port "<point>")
	     (do ((e (car tail) (cdr e))
		  (d "" " "))
		 ((null? e) #f)
	       (format port d)
	       (format port "~s" (car e)))
	     (format port "</point>")))
	  ((member fmat '(#:y y))
	   (do ((num 0 (+ num 1))
		(tail data (cdr tail)))
	       ((null? tail) #f)
	     (format port "<point>~s ~s</point>" num (car tail))))
	  ((member fmat '(#:xy xy))
	   (do ((tail data (cddr tail)))
	       ((null? tail) #f)
	     (format port "<point>~s ~s</point>" (car tail) (cadr tail))))
	  (else
	   (error "unknown point format" fmat)
	   )
	  )
    (format port "</points>")))

;; (plot->xml #t '((.1 .3 .4) #:y "lineandpoint" #f) )
;; (plot->xml #t '((0 .1 .5 -.3 1 .4) #:xy #f "red") )
;; (plot->xml #t '((.1 .3 .4) #:y "lineandpoint" #f) )
;; (plot->xml #t '((0 .1 .9 .5 .3 .9 1 .4 .9) 3 "box" "red") )

(define (guess-data-format dat)
  (let ((a (car dat)))
    (cond ((number? a)
	   (do ((l dat (cdr l))
		(i 0 (+ i 1))
		(x (+ most-negative-fixnum 1)) ; 7 bug!
		(f #f))
	       ((or (null? l) f)
		(if (not f)
		    (if (even? i) #:xy)
		    f))
	     (if (even? i) 
		 (if (>= (car l) x)
		     (set! x (car l))
		     (set! f #:y)))))
	  ((pair? a) #:record)
	  (else 
	   (error "unknown point format" dat)
	   ))))

; (begin (define foo '(0 0 25 .9 75 .9 100 0)) (define bar (loop repeat 6 collect (random 1.0))))
; (guess-data-format foo)
; (guess-data-format bar)
; (guess-data-format (list '(0 0)))

(define (plot-data title . arg)
  ;; #f = focus #t = all num = layer number
  (let ((layer (if (null? arg) -1
		   (if (eq? (car arg) #f) -1
		       (if (eq? (car arg) #t) -2
			   (if (number? arg) arg
			       (error "plot layer not #f #t or number" 
				      (car arg))))))))
    (let ((str (ffi_plot_data title layer)))
      (read-from-string str))
    ))
  