==========================================================================
                               DEPENDENCIES                               
==========================================================================

Juce 1.46, available at:

    http://sourceforge.net/project/showfiles.php?group_id=137492

Premake 3.5 or 3.6 or 3.7, available at:

    http://premake.sourceforge.net/download

SndLib with S7 Scheme, available at:

    ftp://ccrma-ftp.stanford.edu/pub/Lisp/sndlib.tar.gz

OR:

Chicken Scheme 3.0.0, available at:

    http://www.call-with-current-continuation.org/

==========================================================================
                                 BUILDING                                 
==========================================================================

Use premake to create your make files and then make the targets. For
example this is how I build the system on my mac:

    $ premake --target gnu --juce ../juce-1.46 --sndlib ../sndlib
    $ make

The --juce, --sndlib and --chicken options all allow their path to be
either the source directory (eg '--juce ../juce-1.46') or an install
root (eg '--juce /usr/local').

Executables are left in bin/:

    bin/cm                      console app    
    bin/Grace                   gui app


BUILDING WITH SNDLIB:

    $ cd /path/to/sndlib
    $ ./configure CC=g++
    $ make

    $ cd /path/to/cm3
    $ premake --target gnu --juce /path/to/juce --sndlib /path/to/sndlib
    $ make


BUILDING WITH CHICKEN SCHEME 3.0.0:

    $ premake --target gnu --juce /path/to/juce --chicken /path/to/chicken-3.0.0
    $ make

Carlos Pita reports that you can build with the latest Chicken (3.4.0)
if you simply regenerate ChickenBridge.cpp. see developer notes below.

==========================================================================
                                 CM IN EMACS                             
==========================================================================

bin/cm is a console app that can be used as an inferior scheme process
in Emacs. To run cm in Emacs just add this snippet to your .emacs file
and fix 'cm-path' for your machine. Then restart emacs and start CM by
doing: M-x: cm

;-----------------------------------------------------------------------
(defvar cm-path "~/Software/cm/") ; FIX pathname for your machine
(require 'scheme)
(load (concat cm-path "res/etc/sal.el"))
(let ((spec '("definstrument" "loop" "process" "run" "send")))
  (font-lock-add-keywords 'scheme-mode
    (list (cons (concat "(" (regexp-opt spec t) "\\>") 1))))
(defun cm (path)
  "Start CM"
  (interactive (list (if prefix-arg
			 (read-string "Command to start CM: " "cm") 
		       (concat cm-path "bin/cm"))))
  (run-scheme path))


==========================================================================
                                SVN ACCESS                                
==========================================================================

svn co http://commonmusic.svn.sourceforge.net/svnroot/commonmusic/trunk cm

==========================================================================
                                DEVELOPING                                
==========================================================================

To build against the juce debug libs:

    $ make CONFIG=Debug

To create the embedded Scheme runtime sources:

    $ juce_bb scm src SchemeSources

To create the embedded instruments:

    $ juce_bb res/ins src/ Instruments

    To ADD instruments do this first:
      1. Copy the instrument file(s) to res/ins/files.
      2. Edit res/ins/table.xml and rows for the new files.
      3. Create the zip archive and generate the resource:
      $ zip -r files.zip files 

To create the embedded documetation

    $ juce_bb res/doc src/ Documentation

To create the other Resources:

    $ juce_bb res/font src/ Fonts
    $ juce_bb res/images src/ Images

To generate FFI files (requires a working 'format'...):

  (load "/Users/hkt/Software/cm/scm/genffi.scm")
  (s7ffi "/Users/hkt/Software/cm/src/SndLibBridge.cpp")
  (chickenffi "/Users/hkt/Software/cm/scm/chicken-foreign.scm")

To regenerate ChickenBridge.cpp:

    $ cd scm
    $ csc -c++ -embedded -t ChickenBridge.scm
    $ mv ChickenBridge.cpp ../src

==========================================================================
                                  PORTING                                
==========================================================================

The implementation file for each Scheme (s7.scm, Chicken.scm) defines
implementation features that are either not provided or unevenly
provided in scheme implementations. Here is the list of features that
must be in effect after that file is loaded:

(define-macro a b)
(define-for-syntax a b)
(define-record name . slots)
(define-constant a b)
(error str . args)
(format stream fstring . args)
(when test . forms)
(unless test . forms)
(logand i . ints)
(logior i . ints)
(logxor i . ints)
(lognot i)
(ash a i)
(fixnum? n)
most-positive-fixnum
most-negative-fixnum
pi
(object->string x)
(string->keyword s)
(keyword->string k)
(make-equal-hash-table )
(hash-ref tab key )
(hash-set! tab key val)
(random int)
(list-set! l i v)
(format #t "~A~S~%" ...)
(void) 
(read-from-string str)
(sort! lst . pred)
(sort  lst . pred)
(interaction-environment)
(error-protected-process-code timevar waitvar
			      stopping looping stepping )

